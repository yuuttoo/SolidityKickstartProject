var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children } from 'react';
import NextLink from 'next/link';
export var Link = function (props) {
    var href = props.href, onClick = props.onClick, rest = __rest(props, ["href", "onClick"]);
    var newHref = typeof href === 'string' ? href : href.toHref();
    if (typeof href === 'string' || href.isAbsolutePath) {
        var child = Children.only(props.children);
        var children = rest.children, newRest = __rest(rest, ["children"]);
        if (props.passHref || (child.type === 'a' && !('href' in child.props))) {
            var prefetch = newRest.prefetch, restWithoutPrefetch = __rest(newRest, ["prefetch"]);
            return React.cloneElement(child, __assign({ href: newHref }, restWithoutPrefetch));
        }
        return (React.createElement("a", __assign({ href: newHref }, newRest), children));
    }
    if (onClick) {
        return React.createElement("a", __assign({ href: "javascript:void(0)" }, rest));
    }
    return React.createElement(NextLink, __assign({ href: href.toHref(), as: href.toAs() }, rest));
};
