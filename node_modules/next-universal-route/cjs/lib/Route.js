"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = void 0;
var path_to_regexp_1 = require("path-to-regexp");
var url_1 = require("url");
var NextRoute_1 = require("./NextRoute");
var isFunction_1 = require("../utils/isFunction");
var mapValues_1 = require("../utils/mapValues");
var formatUrl_1 = require("../utils/formatUrl");
var isAbsolutePath_1 = require("../utils/isAbsolutePath");
var omitFalsyValues_1 = require("../utils/omitFalsyValues");
var Route = (function () {
    function Route(path, page, urlFormatter, customHandler) {
        this.subdomains = [];
        this.path = path;
        this.setPage("/" + page);
        this.urlFormatter = urlFormatter;
        this.params = {};
        this.queryStringParams = {};
        this.customHandler = customHandler;
    }
    Object.defineProperty(Route.prototype, "query", {
        get: function () {
            return __assign(__assign({}, this._query), this.queryStringParams);
        },
        enumerable: false,
        configurable: true
    });
    Route.prototype.generateUrl = function (params, queryStringParams, options) {
        if (params === void 0) { params = {}; }
        if (options === void 0) { options = { encode: true }; }
        var newParams = this.formatUrl(__assign(__assign({}, this.params), params));
        var newQueryStringParams = __assign({}, omitFalsyValues_1.omitFalsyValues(queryStringParams));
        return new NextRoute_1.NextRoute(this.path, this.page, newParams, newQueryStringParams, this._query, options);
    };
    Route.prototype.generateFromUrl = function (url, params) {
        var _a = Route.parseUrl(url), pathname = _a.pathname, query = _a.query;
        var keys = [];
        var regex = path_to_regexp_1.pathToRegexp(this.path, keys);
        var values = regex.exec(pathname);
        var newParams = this.getQuery(values.slice(1), keys);
        var queryStringParams = __assign(__assign(__assign({}, this.queryStringParams), query), params);
        return this.generateUrl(newParams, queryStringParams);
    };
    Route.prototype.isMatch = function (url) {
        var _a = Route.parseUrl(url), pathname = _a.pathname, query = _a.query;
        if (isAbsolutePath_1.isAbsolutePath(this.path)) {
            return false;
        }
        var keys = [];
        var regex = path_to_regexp_1.pathToRegexp(this.path, keys);
        var isMatch = regex.test(pathname);
        if (isMatch) {
            var values = regex.exec(pathname);
            this._query = __assign(__assign({}, this._query), this.getQuery(values.slice(1), keys));
            this.queryStringParams = query;
        }
        return isMatch;
    };
    Route.prototype.hasSubdomain = function (subdomain) {
        return this.subdomains.indexOf(subdomain) > -1;
    };
    Route.prototype.addSubdomain = function (subdomain) {
        this.subdomains.push(subdomain);
        return this;
    };
    Route.prototype.getCustomHandler = function (app) {
        var _this = this;
        if (!this.customHandler)
            return undefined;
        return function (req, res, pathname, query) {
            if (query === void 0) { query = {}; }
            return _this.customHandler(app, req, res, pathname, query);
        };
    };
    Route.prototype.setPage = function (url) {
        var _a = Route.parseUrl(url), pathname = _a.pathname, query = _a.query;
        this._query = query;
        this.page = pathname;
    };
    Route.prototype.formatUrl = function (params) {
        var _this = this;
        var fn = formatUrl_1.formatUrl;
        if (isFunction_1.isFunction(this.urlFormatter)) {
            fn = function (string) { return formatUrl_1.formatUrl(_this.urlFormatter(string)); };
        }
        return mapValues_1.mapValues(params, function (param) {
            return typeof param === 'string' ? fn(param) : param;
        });
    };
    Route.prototype.getQuery = function (values, keys) {
        return values.reduce(function (params, val, i) {
            var _a;
            return __assign(__assign({}, params), (_a = {}, _a[keys[i].name] = decodeURIComponent(val), _a));
        }, {});
    };
    Route.parseUrl = function (url) {
        var parsedUrl = url_1.parse(url, true);
        var pathname = parsedUrl.pathname, query = parsedUrl.query;
        return {
            pathname: pathname,
            query: query
        };
    };
    return Route;
}());
exports.Route = Route;
